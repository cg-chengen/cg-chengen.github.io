<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>session认证方案</title>
    <link href="/2021/02/26/session%E4%B8%8Ejwt%E8%AE%A4%E8%AF%81%E6%96%B9%E6%A1%88/"/>
    <url>/2021/02/26/session%E4%B8%8Ejwt%E8%AE%A4%E8%AF%81%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="安装session及express"><a href="#安装session及express" class="headerlink" title="安装session及express"></a>安装session及express</h1><p>在终端运行:</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i express-session<br><span class="hljs-built_in">npm</span> i express<br></code></pre></td></tr></table></figure><h1 id="引入session以及express"><a href="#引入session以及express" class="headerlink" title="引入session以及express"></a>引入session以及express</h1><p>在顶部引入session及express:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> session =<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>)<br><span class="hljs-keyword">const</span> express=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="创建express服务器实例"><a href="#创建express服务器实例" class="headerlink" title="创建express服务器实例"></a>创建express服务器实例</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app=express()<br></code></pre></td></tr></table></figure><h1 id="在npm搜索express-session文档"><a href="#在npm搜索express-session文档" class="headerlink" title="在npm搜索express-session文档"></a>在npm搜索express-session文档</h1><p>在<a href="https://www.npmjs.com/%E6%9F%A5%E8%AF%A2express-session,%E6%9F%A5%E9%98%85%E6%96%87%E6%A1%A3,%E6%8C%89%E7%85%A7%E6%96%87%E6%A1%A3%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91">https://www.npmjs.com/查询express-session,查阅文档,按照文档进行代码编译</a></p><h1 id="配置session中间件"><a href="#配置session中间件" class="headerlink" title="配置session中间件"></a>配置session中间件</h1><p>调用<code>session()</code>方法生成读写session的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(session(&#123;<br>secret:<span class="hljs-string">&#x27;hello&#x27;</span>,<br>resave:<span class="hljs-literal">false</span><br>&#125;))<br></code></pre></td></tr></table></figure><p>注意,<strong>建议使用<code>secure:true</code>,其需要一个支持https的网站</strong>,如果设置了secure,但是<strong>访问的网站是http</strong>,则<strong>不会生成cookie</strong></p><p>如果您的<strong>node.js位于代理之后</strong>并且<strong>正在使用<code>secure: true</code></strong>,则需要在<strong>express中设置“ trust proxy”</strong></p><h1 id="托管静态页面"><a href="#托管静态页面" class="headerlink" title="托管静态页面"></a>托管静态页面</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(express.static(<span class="hljs-string">&#x27;url相对地址&#x27;</span>))<br></code></pre></td></tr></table></figure><h1 id="利用urlencoded解析post提交来的数据"><a href="#利用urlencoded解析post提交来的数据" class="headerlink" title="利用urlencoded解析post提交来的数据"></a>利用urlencoded解析post提交来的数据</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(express.urlencoded(&#123;<span class="hljs-attr">extended</span>:<span class="hljs-literal">false</span>&#125;))<br></code></pre></td></tr></table></figure><h1 id="登录api接口"><a href="#登录api接口" class="headerlink" title="登录api接口"></a>登录api接口</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(<span class="hljs-string">&#x27;登录请求的地址&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br><span class="hljs-keyword">if</span>(req.body.username != <span class="hljs-string">&#x27;admin&#x27;</span>||req.body.password !=<span class="hljs-string">&#x27;000000&#x27;</span>)&#123;<br><span class="hljs-keyword">return</span> res.send(&#123;<br>status:<span class="hljs-number">1</span>,<br>message:<span class="hljs-string">&#x27;登录失败&#x27;</span><br>&#125;)<br>&#125;<br>req.seesion.user=req.body<br>req.seesion.isLogin=<span class="hljs-literal">true</span><br>res.send(&#123;<br>status:<span class="hljs-number">0</span>,<br>message:<span class="hljs-string">&#x27;登录成功&#x27;</span><br>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>下面代码表示判断用户请求信息是否正确,然后返回用户登录成功或者失败</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(req.body.username != <span class="hljs-string">&#x27;admin&#x27;</span>||req.body.password !=<span class="hljs-string">&#x27;000000&#x27;</span>)&#123;<br><span class="hljs-keyword">return</span> res.send(&#123;<br>status:<span class="hljs-number">1</span>,<br>message:<span class="hljs-string">&#x27;登录失败&#x27;</span><br>&#125;)<br>&#125;<br>req.seesion.user=req.body<br>req.seesion.isLogin=<span class="hljs-literal">true</span><br>res.send(&#123;<br>status:<span class="hljs-number">0</span>,<br>message:<span class="hljs-string">&#x27;登录成功&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>上面代码中的<code>req.seesion.user=req.body;req.seesion.isLogin=true; </code>表示将登录成功后的用户信息保存到session中(因为cookie的安全性问题,将隐私信息保存到session中)</p><h1 id="获取用户信息接口"><a href="#获取用户信息接口" class="headerlink" title="获取用户信息接口"></a>获取用户信息接口</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(<span class="hljs-string">&#x27;获取用户信息url地址&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br><span class="hljs-keyword">if</span>(req.session.isLogin != <span class="hljs-literal">true</span>)&#123;<br><span class="hljs-keyword">return</span> res.send(&#123;<br>status:<span class="hljs-number">1</span>,<br>message:<span class="hljs-string">&#x27;未登录&#x27;</span><br>&#125;)<br>&#125;<br>res.send(&#123;<br>status:<span class="hljs-number">0</span>,<br>message:<span class="hljs-string">&#x27;登录成功&#x27;</span>,<br>username:req.session.user.username<br>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>下面的代码表示判断session.isLogin的布尔值来决定是否登录成功</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(req.session.isLogin != <span class="hljs-literal">true</span>)&#123;<br><span class="hljs-keyword">return</span> res.send(&#123;<br>status:<span class="hljs-number">1</span>,<br>message:<span class="hljs-string">&#x27;未登录&#x27;</span><br>&#125;)<br>&#125;<br>res.send(&#123;<br>status:<span class="hljs-number">0</span>,<br>message:<span class="hljs-string">&#x27;登录成功&#x27;</span>,<br>username:req.session.user.username<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="退出登录的接口"><a href="#退出登录的接口" class="headerlink" title="退出登录的接口"></a>退出登录的接口</h1><p>利用session.destory()来清除浏览器的session,避免用户退出登录后,直接通过网址跳过登录验证过程进入首页</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">app.post(<span class="hljs-string">&#x27;退出登录的用户信息的地址&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>req.session.destory();<br>res.send(&#123;<br>status:<span class="hljs-number">0</span>,<br>message;<span class="hljs-string">&#x27;退出成功&#x27;</span><br>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="监听app-指定端口号启动服务器"><a href="#监听app-指定端口号启动服务器" class="headerlink" title="监听app,指定端口号启动服务器"></a>监听app,指定端口号启动服务器</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">app.listen(<span class="hljs-number">80</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Express server running at http://127.0.0.1:80&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="jwt与session方案"><a href="#jwt与session方案" class="headerlink" title="jwt与session方案"></a>jwt与session方案</h1><p>1    用户端先发送带有用户信息(不带cookie)的post请求</p><p>2    服务器验证通过与否,通过则将用户信息放入session中,通过用户端的get将session存放于cookie中</p><p>3    用户端发送带有session的cookie请求</p><p>4    客户端根据cookie中的session从内存中寻找用户数据,再返回用户端信息(响应数据)</p><p><img src="D:\desk\json\session认证方案.png" alt="session认证方案"></p><p>jwt就是一个经过加密和校验处理的字符串</p><p>1    用户端发送用户的验证信息post请求</p><p>2    服务端验证通过后生成jwt,将用户信息放入jwt后发送给用户</p><p>3    客户端发送带有jwt的cookie的请求</p><p>4    用户端验证jwt中的签名后从jwt中获取用户信息,再向用户端返回响应信息</p><p><img src="D:\desk\json\jwt认证方案.png" alt="jwt认证方案"></p><p>jwt与session区别:</p><p>1    jwt将用户信息放在token的token中,减轻了服务端的压力,session则是将信息放在服务器中,占用了大量的服务器内存</p><p>2    前后端分离</p><p>​     session是后端直接对接浏览器,利用session+cookies开发</p><pre><code> jwt在前后端分离的情况下,后端只需要对接服务器即可</code></pre><p>3    jwt能够轻松使用单点登录,因为区别于session,用户的状态在用户端</p><p>​     token 可保存自定义信息，如用户基本信息，web服务器用key去解析token，就获取到请求用户的信息了</p><p>​     我们也可以配置它以便包含用户拥有的任何权限。这意味着每个服务不需要与授权服务交互才能授权用户</p><p>4    token方案保证了服务的无状态，所有的信息都是存在分布式缓存中。基于分布式存储，这样可以水平扩展来支持高并发</p><p>​     不依赖与cookie机制，可以通过客户端约定的协议来传输token，浏览器可以存在cookie中，手机端可以放在内存或者本地文件中，代价是增加了外部存储依赖以及在代码方面要复杂</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SQl常用命令</title>
    <link href="/2021/02/24/SQl%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/02/24/SQl%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h1><h2 id="1-从指定表中查询所有列的数据"><a href="#1-从指定表中查询所有列的数据" class="headerlink" title="1.从指定表中查询所有列的数据"></a>1.从指定表中查询所有列的数据</h2><p>select    *****    from 表名称</p><h2 id="2-从指定表中查询指定列的数据"><a href="#2-从指定表中查询指定列的数据" class="headerlink" title="2.从指定表中查询指定列的数据"></a>2.从指定表中查询指定列的数据</h2><p>select    <strong>列名称</strong>    from    表名称</p><h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><p>向指定的数据表中插入数据,多个列和值之间使用逗号隔开, 列和值的顺序要保持一致    <strong>(列与值一一对应)</strong></p><p>insert    into    表名称    <strong>(列1,列2,……)</strong>    values    (<strong>值1,值2,……)</strong></p><h1 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h1><p>更新数据表中某一列或多列数据,SET 后多列数据更新使用逗号隔开, WHERE 后面跟的条件不能省略 </p><p>updata    表名称    set    列1=值1,    列2=值2    where    列名称=值</p><h1 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h1><p>删除数据表中的某一行或多行数据</p><p>delete    from    表名称    where    列名称=值</p><h1 id="where子句的作用"><a href="#where子句的作用" class="headerlink" title="where子句的作用"></a>where子句的作用</h1><p>如果需要有条件的从表中选取数据, 可以使用 WHERE 子句添加到 SQL 语句的末尾</p><p>select    *    from    表名称    where    列名称    运算符    值</p><p>常见的运算符:</p><p>(1) &gt; 和 &gt;= </p><p>(2) &lt; 和 &lt;=</p><p>(3) != 或 &lt;&gt;</p><p>(4) =</p><p>(5) BETWEEN</p><p>(6) LIKE</p><h1 id="and和or的作用"><a href="#and和or的作用" class="headerlink" title="and和or的作用"></a>and和or的作用</h1><p>可以在 WHERE 子句中把多个条件结合起来, AND 表示并且, OR 表示或者的意思</p><p>例如:</p><p>select    *    from    表名称    where    列名称    运算符    值    <strong>and    列名称    运算符    值</strong></p><h1 id="ORDER-BY升序降序"><a href="#ORDER-BY升序降序" class="headerlink" title="ORDER BY升序降序"></a>ORDER BY升序降序</h1><p>同时使用 ORDER BY 和 WHERE子句时, 应该让 ORDER BY 位于 WHERE 之后, 否则将会产生错误,<strong>即where和order by同时使用,where必须在前,order by必须在后</strong></p><h2 id="单次升序或降序"><a href="#单次升序或降序" class="headerlink" title="单次升序或降序"></a>单次升序或降序</h2><p>boder by是固定格式,<strong>决定升序降序的是末尾的asc与desc</strong>,<strong>其中desc表示降序,asc表示升序</strong>(默认升序)</p><p>select    *    from    users    <strong>ORDER BY</strong>    status    <strong>desc</strong></p><p>select    *    from    users    <strong>ORDER BY</strong>    status    <strong>asc</strong></p><h2 id="多重排序"><a href="#多重排序" class="headerlink" title="多重排序"></a>多重排序</h2><p>select    列名称    from    表名称    ORDER    BY    列名称    [排列规则],    列名称    [排列规则]</p><h1 id="count函数作用"><a href="#count函数作用" class="headerlink" title="count函数作用"></a>count函数作用</h1><p>可以返回匹配指定条件的行数</p><p>select count    (*)    from    表名称</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>模块加载机制</title>
    <link href="/2021/02/22/%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/02/22/%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="模块的加载机制"><a href="#模块的加载机制" class="headerlink" title="模块的加载机制"></a>模块的加载机制</h1><h2 id="1-模块优先从缓存中进行加载"><a href="#1-模块优先从缓存中进行加载" class="headerlink" title="1.模块优先从缓存中进行加载"></a>1.模块优先从缓存中进行加载</h2><p>模块在第一次加载后会被缓存, 如果每次调用 require(‘foo’) 都解析到同一文件，则返回相同的对象（不会导致模块的代码被执行多次）</p><h2 id="2-缓存的作用"><a href="#2-缓存的作用" class="headerlink" title="2.缓存的作用"></a>2.缓存的作用</h2><p> 不论是 node.js 内置的核心模块，用户自定义的模块还是第三方模块，都有对应的缓存策略，提升模块的</p><p>  加载效率</p><h1 id="内置模块的加载机制"><a href="#内置模块的加载机制" class="headerlink" title="内置模块的加载机制"></a>内置模块的加载机制</h1><p>require()总是会加载核心模块,比如require(‘http’)始终返回内置的http模块,即使有同名文件</p><h1 id="自定义模块加载机制"><a href="#自定义模块加载机制" class="headerlink" title="自定义模块加载机制"></a>自定义模块加载机制</h1><p>使用require()去加载自定义模块,必须指定’./‘’\‘或者’../‘开头的路径,否则node会将其当做内置模块或者来自node_moudle下的第三方模块处理</p><p>如果按照文件名没有找到,node.js会尝试找后缀为.js、.json、.node(<strong>按照.js===&gt;.json===&gt;.node的顺序</strong>)的文件进行加载，如果上述没找到,node.js则会尝试加载目录下的index.js或者index.node文件</p><h1 id="第三方模块加载机制"><a href="#第三方模块加载机制" class="headerlink" title="第三方模块加载机制"></a>第三方模块加载机制</h1><p>如果使用require()去加载的模块标识符既不是核心模块,也不是有’\‘、’./‘、’../‘这样开头的路径,那么node.js则会从当前模块的父目录开始,尝试从其node_moudle目录里加载模块,如果还没找到,则会向再上一级父目录查找,知道系统的根目录</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>npm常用命令</title>
    <link href="/2021/02/22/npm/"/>
    <url>/2021/02/22/npm/</url>
    
    <content type="html"><![CDATA[<h1 id="查看自己电脑上的npm包"><a href="#查看自己电脑上的npm包" class="headerlink" title="查看自己电脑上的npm包"></a>查看自己电脑上的npm包</h1><p>​                        npm -v</p><h1 id="下载一个具体的包"><a href="#下载一个具体的包" class="headerlink" title="下载一个具体的包"></a>下载一个具体的包</h1><p>​                         npm    -i    具体的包名</p><h1 id="查看一个指定的包"><a href="#查看一个指定的包" class="headerlink" title="查看一个指定的包"></a>查看一个指定的包</h1><p>​                        npm    view    具体的包名</p><h1 id="下载一个指定版本的包"><a href="#下载一个指定版本的包" class="headerlink" title="下载一个指定版本的包"></a>下载一个指定版本的包</h1><p>​                        npm    i    具体的包名@版本号</p><h1 id="快速创建包管理配置文件"><a href="#快速创建包管理配置文件" class="headerlink" title="快速创建包管理配置文件"></a>快速创建包管理配置文件</h1><p>​                        npm    init    -y</p><h1 id="根据package-json文件下载包"><a href="#根据package-json文件下载包" class="headerlink" title="根据package.json文件下载包"></a>根据package.json文件下载包</h1><p>​                        npm    install</p><h1 id="卸载指定包"><a href="#卸载指定包" class="headerlink" title="卸载指定包"></a>卸载指定包</h1><p>​                        npm    uninstall</p><h1 id="安装开发测试环节用到的包"><a href="#安装开发测试环节用到的包" class="headerlink" title="安装开发测试环节用到的包"></a>安装开发测试环节用到的包</h1><p>​                        npm    i    –save–dev    包名称@版本号</p><p>​                        npm    i    -D    包名称@版本号</p><h1 id="解决包下载缓慢的问题-换源"><a href="#解决包下载缓慢的问题-换源" class="headerlink" title="解决包下载缓慢的问题/换源"></a>解决包下载缓慢的问题/换源</h1><h2 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法:"></a>第一种方法:</h2><ol><li><p>在任意目录下执行                        npm config set registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p></li><li><p>检查源是否更换成功                    npm config get registry</p></li></ol><h2 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法:"></a>第二种方法:</h2><p>   1.npm i -g nrm</p><p>   2.nrm ls</p><p>   3.nrm use taobao</p><h1 id="npm包的分类"><a href="#npm包的分类" class="headerlink" title="npm包的分类"></a>npm包的分类</h1><p>npm包从作用域上可分为项目包与核心包</p><p>1.项目包</p><p>被安装到项目的 node_modules 目录中的包，只能在当前项目下进行使用</p><ul><li><p>[核心依赖包] 线上环境用到的依赖包： npm i 包名称</p><p>- [开发依赖包] 开发测试环境用到的依赖包：npm i -D 包名称</p></li></ul><ol start="2"><li><p>全局包</p><p>被下载到 node 安装位置 node_modules 目录下的包，可以在全局范围(任意目录)内使用</p><p>安装命令： npm i -g 包名称</p><p>卸载命令： npm uninstall -g 包名称</p></li></ol><h1 id="将md文件转换成html文件"><a href="#将md文件转换成html文件" class="headerlink" title="将md文件转换成html文件"></a>将md文件转换成html文件</h1><p>1.安装全局包                        </p><p>npm    i    -g    i5ting_toc</p><p>2.使用全局命令</p><p>i5ting_toc    -f    要转换的md文件    index.html</p><h1 id="在npm发布包"><a href="#在npm发布包" class="headerlink" title="在npm发布包"></a>在npm发布包</h1><ol><li><p>编写包的说明文档 </p><p>在包的根目录下添加文件 README.md 文件</p></li></ol><ol start="2"><li><p>注册一个 npm 账号</p><p>打开注册网址: <a href="https://www.npmjs.com/signup">https://www.npmjs.com/signup</a></p></li></ol><ol start="3"><li><p>pc端打开注册邮箱进行确认</p><p>点击蓝色按钮 Verify Email</p></li></ol><ol start="4"><li><p>在包的发布目录下面执行命令</p><p>npm publish</p></li></ol><ol start="5"><li><p>删除已经发布的包</p><p>npm unpublish 包名称 –foroc</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/01/28/js%E9%AB%98%E7%BA%A7003/"/>
    <url>/2021/01/28/js%E9%AB%98%E7%BA%A7003/</url>
    
    <content type="html"><![CDATA[<h1 id="一、函数定义"><a href="#一、函数定义" class="headerlink" title="一、函数定义"></a>一、函数定义</h1><p>三种声明函数的方式</p><p>1、 <strong>函数声明方式</strong></p><p><strong>function sum（）{}；调用：sum（）</strong></p><p>2、<strong>函数表达式声明方式</strong></p><p><strong>var add=function（）{}；调用：add（）</strong></p><p>3、<strong>使用Function构造函数</strong></p><p><strong>var add2=new Function（）；调用 ：add2（）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>&#125;<br>fn() <span class="hljs-comment">// 1. 函数声明</span><br><br><span class="hljs-keyword">var</span> fn2 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>&#125;<br>fn() <span class="hljs-comment">//2. 函数表达式</span><br><br><span class="hljs-keyword">var</span> fn = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;console.log(a + b)&#x27;</span>)<br>fn(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">console</span>.dir(fn); <span class="hljs-comment">// 3. 利用 Function 构造函数</span><br></code></pre></td></tr></table></figure><h1 id="二、函数调用"><a href="#二、函数调用" class="headerlink" title="二、函数调用"></a>二、函数调用</h1><p><strong>函数的多种调用方式:</strong></p><p>​    <strong>1. 普通函数</strong></p><p>​    <strong>2. 对象中的函数调用</strong></p><p>​    <strong>3. 构造函数的调用</strong></p><p>​    <strong>4. 绑定事件的处理函数</strong></p><p>​    <strong>5. 定时器的处理函数</strong> </p><p>​    <strong>6. 立即执行函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>        &#125;<br>fn1() <span class="hljs-comment">// 1. 普通函数</span><br><br><br><span class="hljs-keyword">var</span> fn2 = &#123;<br>            say: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>            &#125;<br>        &#125;<br>fn2.say() <span class="hljs-comment">// 2. 对象中的函数调用</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Fn3</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.uname = uname<br>            <span class="hljs-built_in">this</span>.age = age<br>        &#125;<br><span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> Fn3(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">11</span>)<br><span class="hljs-built_in">console</span>.log(xm); <span class="hljs-comment">//3.构造函数的调用</span><br><br><br><span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>)<br>btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>);<br>         &#125;) <span class="hljs-comment">//4.绑定事件的处理函数</span><br><br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>);<br>          &#125;, <span class="hljs-number">1e3</span>) <span class="hljs-comment">//5.定时器的处理函数</span><br><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">20</span>;<br>!(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span><br>            <span class="hljs-built_in">console</span>.log(num);<br>        &#125;)() <span class="hljs-comment">//6. 立即执行函数</span><br></code></pre></td></tr></table></figure><h1 id="三、函数内部的this指向"><a href="#三、函数内部的this指向" class="headerlink" title="三、函数内部的this指向"></a>三、函数内部的this指向</h1><p><strong>1、普通函数 this 指向window</strong></p><p><strong>2、定时器函数 this 指向的也是window</strong></p><p><strong>3、立即执行函数 this还是指向window</strong></p><p><strong>4、对象的方法 this指向的是对象</strong></p><p><strong>5、构造函数 this 指向实例对象 原型对象里面的this 指向的也是实例对象</strong></p><p><strong>6、绑定事件函数 this 指向的是函数的调用者</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 函数的不同调用方式决定了this 的指向不同</span><br><span class="hljs-comment">// 1. 普通函数 this 指向window</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;普通函数的this&#x27;</span> + <span class="hljs-built_in">this</span>);<br>&#125;<br><span class="hljs-built_in">window</span>.fn();<br><span class="hljs-comment">// 2. 对象的方法 this指向的是对象 o</span><br><span class="hljs-keyword">var</span> o = &#123;<br>    sayHi: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;对象方法的this:&#x27;</span> + <span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br>o.sayHi();<br><span class="hljs-comment">// 3. 构造函数 this 指向 ldh 这个实例对象 原型对象里面的this 指向的也是 ldh这个实例对象</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params"></span>) </span>&#123;&#125;;<br>Star.prototype.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star();<br><span class="hljs-comment">// 4. 绑定事件函数 this 指向的是函数的调用者 btn这个按钮对象</span><br><span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;绑定时间函数的this:&#x27;</span> + <span class="hljs-built_in">this</span>);<br>&#125;;<br><span class="hljs-comment">// 5. 定时器函数 this 指向的也是window</span><br><span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;定时器的this:&#x27;</span> + <span class="hljs-built_in">this</span>);<br><br>&#125;, <span class="hljs-number">1000</span>);<br><span class="hljs-comment">// 6. 立即执行函数 this还是指向window</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;立即执行函数的this&#x27;</span> + <span class="hljs-built_in">this</span>);<br>&#125;)();<br></code></pre></td></tr></table></figure><h1 id="四、改变函数内this指向call方法"><a href="#四、改变函数内this指向call方法" class="headerlink" title="四、改变函数内this指向call方法"></a>四、改变函数内this指向call方法</h1><p> <strong>改变函数内this指向js提供了三种方法 call()     apply()     bind()</strong></p><p> 第一个参数 thisArg 如果不传或是 null、undefined，默认函数内 this 指向 window </p><p><strong>返回值：函数调用的结果</strong></p><p>可以参考笔记—–<strong>js高级002</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age);<br>&#125;<br>fn.call(&#123;<br>    name: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>    age: <span class="hljs-number">10</span><br>&#125;, <span class="hljs-number">10</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">x, y</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.x = x<br>    <span class="hljs-built_in">this</span>.y = y<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params">x, y</span>) </span>&#123;<br>    Father.call(<span class="hljs-built_in">this</span>, x, y)<span class="hljs-comment">//此处Son函数利用call调用Father，完成子类对父类的继承</span><br>&#125;<br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> Son(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<span class="hljs-comment">//原本Son缺少this.x=x和this.y=y,无法加入实参调用，但是Son继承了Father的this.x=x和this.y=y，所以可以对Son构造函数进行调用</span><br><span class="hljs-built_in">console</span>.log(obj);<br></code></pre></td></tr></table></figure><h1 id="五、改变函数内this指向apply方法"><a href="#五、改变函数内this指向apply方法" class="headerlink" title="五、改变函数内this指向apply方法"></a>五、改变函数内this指向apply方法</h1><p><strong>改变函数内this指向 js提供了三种方法 call()    apply()    bind()</strong></p><p><strong>返回值：函数调用的结果</strong></p><p>apply()接收的值是数组，区别于call方法</p><p>在可以使用 call 的情况下， 都可以使用 apply 替代</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>]<br>        <span class="hljs-keyword">var</span> res = <span class="hljs-built_in">Math</span>.max.apply(<span class="hljs-literal">null</span>, arr) <span class="hljs-comment">//接收数组，可以将数组转换成逗号分隔的参数</span><br>        <span class="hljs-built_in">console</span>.log(res);<br></code></pre></td></tr></table></figure><h1 id="六、改变函数内this指向bind方法"><a href="#六、改变函数内this指向bind方法" class="headerlink" title="六、改变函数内this指向bind方法"></a>六、改变函数内this指向bind方法</h1><p><strong>改变函数内this指向 js提供了三种方法 call() apply() bind()</strong></p><p>bind()区别于call()和apply(),bind()不会调用原先的函数，而是新建立一个函数，再对新函数进行调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 3. bind()  绑定 捆绑的意思</span><br>       <span class="hljs-keyword">var</span> o = &#123;<br>           name: <span class="hljs-string">&#x27;andy&#x27;</span><br>       &#125;;<br><br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>           <span class="hljs-built_in">console</span>.log(a + b);<br><br><br>       &#125;;<br>       <span class="hljs-keyword">var</span> f = fn.bind(o, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>       f();<br>       <span class="hljs-comment">// 1. 不会调用原来的函数 可以改变原来函数内部的this 指向</span><br>       <span class="hljs-comment">// 2. 返回的是原函数改变this之后产生的新函数</span><br>       <span class="hljs-comment">// 3. 如果有的函数我们不需要立即调用,但是又想改变这个函数内部的this指向此时用bind</span><br>       <span class="hljs-comment">// 4. 我们有一个按钮,当我们点击了之后,就禁用这个按钮,3秒钟之后开启这个按钮</span><br>       <span class="hljs-comment">// var btn1 = document.querySelector(&#x27;button&#x27;);</span><br>       <span class="hljs-comment">// btn1.onclick = function() &#123;</span><br>       <span class="hljs-comment">//     this.disabled = true; // 这个this 指向的是 btn 这个按钮</span><br>       <span class="hljs-comment">//     // var that = this;</span><br>       <span class="hljs-comment">//     setTimeout(function() &#123;</span><br>       <span class="hljs-comment">//         // that.disabled = false; // 定时器函数里面的this 指向的是window</span><br>       <span class="hljs-comment">//         this.disabled = false; // 此时定时器函数里面的this 指向的是btn</span><br>       <span class="hljs-comment">//     &#125;.bind(this), 3000); // 这个this 指向的是btn 这个对象</span><br>       <span class="hljs-comment">// &#125;</span><br>       <span class="hljs-keyword">var</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;button&#x27;</span>);<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; btns.length; i++) &#123;<br>           btns[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               <span class="hljs-built_in">this</span>.disabled = <span class="hljs-literal">true</span>;<br>               <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                   <span class="hljs-built_in">this</span>.disabled = <span class="hljs-literal">false</span>;<br>               &#125;.bind(<span class="hljs-built_in">this</span>), <span class="hljs-number">2000</span>);<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><h1 id="七、bind方法应用"><a href="#七、bind方法应用" class="headerlink" title="七、bind方法应用"></a>七、bind方法应用</h1><p>案例： <strong>为定时器中的函数修改 this 指向：点击按钮后禁用这个按钮，3s后再开启</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<span class="hljs-comment">//获取btn</span><br>btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">//给btn绑定点击事件</span><br>          <span class="hljs-built_in">this</span>.disabled = <span class="hljs-literal">true</span>;<span class="hljs-comment">//禁用按钮，此次禁用为鼠标点击后禁用按钮</span><br>          <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>              <span class="hljs-built_in">this</span>.disabled = <span class="hljs-literal">false</span><span class="hljs-comment">//解禁按钮，此次为解禁之前被禁用的按钮</span><br>          &#125;.bind(<span class="hljs-built_in">this</span>), <span class="hljs-number">2e3</span>)<span class="hljs-comment">//因为定时器函数的this原指向window，此次使用bind（this）,将定时器中的this重新指向btn</span><br>      &#125;)<br></code></pre></td></tr></table></figure><p>上面函数的原理是：btn的绑定事件函数里的this指向btn，但是在绑定事件函数中又插入了一个定时器函数，此定时器函数的this指向window，所以需要使用call或者apply或者bind()将定时器函数的this指向btn，此时的结构为：绑定事件函数{  定时器函数.bind(  )  }</p><h1 id="八、严格模式"><a href="#八、严格模式" class="headerlink" title="八、严格模式"></a>八、严格模式</h1><p>严格模式的优点：</p><p> 采用具有限制性JavaScript变体的一种方式，摆脱了以前的松散模式</p><ol><li><p>消除了 js 代码的不合理和不严谨地方，减少怪异行为</p><ol start="2"><li><p>消除了代码的不安全地方，保证代码安全运行</p></li><li><p>提高编译器的效率，增加运行的速度</p></li></ol></li><li><p>禁用 ECMAScript 未来版本中可能会定义的一些语法 class extends super 等</p></li></ol><p>严格模式的启用：</p><p> 即在<strong>代码开头添加 ‘use strict’</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;script&gt;<br><span class="hljs-meta">        &#x27;use strict&#x27;</span>;<span class="hljs-comment">//启用严格模式，use strict代码需要打引号</span><br>    &lt;/script&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h1 id="九、严格模式的变化"><a href="#九、严格模式的变化" class="headerlink" title="九、严格模式的变化"></a>九、严格模式的变化</h1><p>严格模式在项目开发中不常用(了解)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>; <br><br> <span class="hljs-comment">// 1. 变量未声明不能直接赋值</span><br> num = <span class="hljs-number">10</span>;<br> <span class="hljs-built_in">console</span>.log(num);<span class="hljs-comment">//此处的打印会报错，num未声明就被赋值</span><br> <span class="hljs-comment">// 2. 变量必须先声明再使用</span><br> num = <span class="hljs-number">10</span>;<br> <span class="hljs-built_in">console</span>.log(num);<span class="hljs-comment">//此处的打印会报错，num未声明就被使用</span><br> <span class="hljs-comment">// 4. 函数内的 this 默认指向 undefined</span><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//此处函数内的this默认指向undefined</span><br> &#125;<br> fn()<br> <span class="hljs-comment">// 5. 构造函数和类只能加 new 进行使用</span><br><br> <span class="hljs-comment">// 6. 函数中的参数名不能重名 </span><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a</span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.a = a;<br>     <span class="hljs-built_in">this</span>.a = a<br> &#125;<br> fn(<span class="hljs-number">1</span>)<br> <span class="hljs-comment">// 7. 不允许在非函数的代码块内声明函数 (chrome 浏览器没有实现)</span><br></code></pre></td></tr></table></figure><h1 id="十、高阶函数"><a href="#十、高阶函数" class="headerlink" title="十、高阶函数"></a>十、高阶函数</h1><p>高阶函数是对其他函数进行操作的函数，主要有两种类型的高阶函数：</p><ol><li><p>把函数作为参数的函数</p></li><li><p>把函数作为返回值的函数 </p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">animate</span>(<span class="hljs-params">callback</span>) </span>&#123;<br>         <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//将setTimeout(function() &#123;callback() &#125;, 1e3)函数作为参数</span><br>                callback()<br>            &#125;, <span class="hljs-number">1e3</span>)<br>        &#125;<br>animate(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>            &#125;) <span class="hljs-comment">//1. 把函数作为参数的函数</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//此处function没有调用，所以会将整个函数返回给fn</span><br>              <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>            &#125;<br>        &#125;<br><span class="hljs-keyword">var</span> res = fn() <span class="hljs-comment">//fn（）返回值是function() &#123; console.log(2); &#125;</span><br><span class="hljs-built_in">console</span>.log(res);<br>res() <span class="hljs-comment">// 2. 把函数作为返回值的函数</span><br></code></pre></td></tr></table></figure><h1 id="十一、闭包"><a href="#十一、闭包" class="headerlink" title="十一、闭包"></a>十一、闭包</h1><p> 一、闭包的概念 </p><p>   内部函数访问外部函数声明的变量，这种组合方式就是闭包</p><p>  二、JS 中的垃圾回收机制(GC)</p><p>   <strong>垃圾回收机制</strong>会定期（周期性）找出那些<strong>不再引用</strong>到的内存（变量），然后释放其内存</p><p>  三、闭包产生的原因</p><p>   (1) <strong>当一个函数内的声明的变量没有被其他函数引用时</strong>，那么调用完这个函数后，</p><p>   所有的局部变量就会被垃圾回收机制清除；</p><p>   (2) <strong>一旦这个变量被另外一个函数所引用</strong>，<strong>这个变量的值会始终保存在内存中</strong>，</p><p>   <strong>不会被垃圾回收机制回收</strong>，<strong>从而形成了闭包</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(++num);<br>            &#125;<br>        &#125;<br><span class="hljs-keyword">var</span> res = fn()<br>res() <span class="hljs-comment">//此处res为fn函数调用了foo的函数</span><br>res()<br><span class="hljs-comment">//res调用，由最内部函数foo开始，需要num，引用fn函数的num=10,又因为res=fn()，所以num=11</span><br></code></pre></td></tr></table></figure><h1 id="十二、闭包的作用（优缺点）"><a href="#十二、闭包的作用（优缺点）" class="headerlink" title="十二、闭包的作用（优缺点）"></a>十二、闭包的作用（优缺点）</h1><p> 一、闭包的作用</p><p>   （1）<strong>延伸了变量的使用范围</strong></p><p>   （2）实现了<strong>数据的封装</strong></p><p>   （3）实现了<strong>数据的缓存</strong>（函数的柯里化）</p><p>  二、闭包的缺点 (了解)</p><p>   (1) 闭包会使得函数中的变量都被保存在内存中，<strong>加大了内存消耗 (空间换时间)</strong></p><p>   (2) 容器引发<strong>内存泄漏</strong> (内存没有及时清理)</p><h1 id="十三、案例：点击li打印当前的索引"><a href="#十三、案例：点击li打印当前的索引" class="headerlink" title="十三、案例：点击li打印当前的索引"></a>十三、案例：点击li打印当前的索引</h1><p>本代码使用了立即调用函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">j</span>)</span>&#123;<br>     btns[j].addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                    <span class="hljs-built_in">console</span>.log(j);<br>                &#125;);<br>&#125;)(i)<br><br><br>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">j</span>)</span>&#123;<br>    <br>    <br>    <br>&#125;)(i)<span class="hljs-comment">//立即调用函数，i为实参，j为形参，i是for循环中的，j是自己命名的</span><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 闭包的应用: 在异步任务中使用同步任务下的变量  </span><br><br> <span class="hljs-comment">// 需求: 点击每个按钮弹出当前按钮的索引</span><br> <span class="hljs-keyword">var</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;button&#x27;</span>)<br> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; btns.length; i++) &#123;<br>     (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">j</span>) </span>&#123;<br>         btns[j].addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>             <span class="hljs-built_in">console</span>.log(j);<br>         &#125;)<br>     &#125;)(i) <span class="hljs-comment">//立即执行函数经过遍历会有五份</span><br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/01/28/js%E9%AB%98%E7%BA%A7002/"/>
    <url>/2021/01/28/js%E9%AB%98%E7%BA%A7002/</url>
    
    <content type="html"><![CDATA[<h1 id="一：创建对象的三种方式"><a href="#一：创建对象的三种方式" class="headerlink" title="一：创建对象的三种方式"></a><strong>一：创建对象的三种方式</strong></h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1、构造函数创建</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">People</span>(<span class="hljs-params">name, age, height</span>) </span>&#123;<br>      <span class="hljs-built_in">this</span>.name = name<br>      <span class="hljs-built_in">this</span>.age = age<br>      <span class="hljs-built_in">this</span>.height = height<br>    &#125;<br><span class="hljs-keyword">var</span> man = <span class="hljs-keyword">new</span> People(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">12</span>, <span class="hljs-number">120</span>)<br>    <br><span class="hljs-comment">//2、new Object（）创建</span><br><span class="hljs-keyword">var</span> people2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>    people2.name = <span class="hljs-string">&#x27;1&#x27;</span><br><br><span class="hljs-comment">//3、字面量创建</span><br><span class="hljs-keyword">var</span> people3 = &#123;<br>      name: <span class="hljs-string">&#x27;1&#x27;</span><br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="二：静态成员和实例成员"><a href="#二：静态成员和实例成员" class="headerlink" title="二：静态成员和实例成员"></a><strong>二：静态成员和实例成员</strong></h1><p>1、实例成员指只能通过实例对象才能访问的属性或方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">People</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.name = name<span class="hljs-comment">//实例成员，在函数内添加</span><br>     <span class="hljs-built_in">this</span>.age = age<span class="hljs-comment">//实例成员，在函数内添加</span><br>   &#125;<br>   <span class="hljs-keyword">var</span> man = <span class="hljs-keyword">new</span> People(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">12</span>)<br><span class="hljs-built_in">console</span>.log(man.name);<br>People.height = <span class="hljs-number">180</span> <span class="hljs-comment">// 静态成员，在函数外添加</span><br><span class="hljs-built_in">console</span>.log(People.height);<br></code></pre></td></tr></table></figure><p>实例成员是在函数内部添加的成员，例如<strong>name，age</strong>都是实例成员，必须要用实例化对象<strong>man</strong>才能调用</p><p>静态成员则是在函数外部添加的成员，例如<strong>height</strong>是静态成员，只有构造函数本身才能调用</p><h1 id="三：构造函数的原型"><a href="#三：构造函数的原型" class="headerlink" title="三：构造函数的原型"></a><strong>三：构造函数的原型</strong></h1><p>构造函数中直接添加方法有个<strong>缺点</strong>，每次创建对象时，都需要重新在<strong>堆</strong>中创建新的的<strong>内存空间</strong>，导致<strong>内存空间占用率过高</strong></p><p>为了解决构造函数创建对象时内存占用过高的问题，可以使用构造<strong>函数原型prototype</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Man</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.name = name<br>            <span class="hljs-built_in">this</span>.age = age<br>        &#125;<br><span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> Man(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">15</span>)<br><span class="hljs-keyword">var</span> xg = <span class="hljs-keyword">new</span> Man(<span class="hljs-string">&#x27;小光&#x27;</span>, <span class="hljs-number">19</span>)<br><br>Man.prototype.height = <span class="hljs-number">150</span><span class="hljs-comment">//通过prototype给man新增了height属性</span><br>Man.prototype.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">//通过prototype给man新增了say方法</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>        &#125;<br><br>xm.say()<span class="hljs-comment">//因为prototype继承了man，而且xm为man构造函数的实例化对象，所以可以直接使用xm.say()调用</span><br><span class="hljs-built_in">console</span>.log(xg.height);<br></code></pre></td></tr></table></figure><p><strong>函数原型prototype：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Man</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.name = name<br>            <span class="hljs-built_in">this</span>.age = age<br>        &#125;<br><span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> Man(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">15</span>)<br><span class="hljs-keyword">var</span> xg = <span class="hljs-keyword">new</span> Man(<span class="hljs-string">&#x27;小光&#x27;</span>, <span class="hljs-number">19</span>)<br><br>Man.prototype.height = <span class="hljs-number">150</span><br>Man.prototype.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>        &#125;<br><br>xm.say()<br><span class="hljs-built_in">console</span>.log(xg.height);<br></code></pre></td></tr></table></figure><p>1、只要是函数就有prototype属性，非函数的对象则没有这个属性    </p><p>2、prototype的值默认为一个对象</p><p>3、在prototype对象上的属性及方法，都会被new 构造函数（）创建出来的实例对象所继承</p><h1 id="四：对象原型proto"><a href="#四：对象原型proto" class="headerlink" title="四：对象原型proto"></a><strong>四：对象原型<u><strong></u>proto<u></strong></u></strong></h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Man</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.name = name<br>            <span class="hljs-built_in">this</span>.age = age<br>            <span class="hljs-built_in">this</span>.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>            &#125;<br>        &#125;<br>Man.prototype.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>);<br>        &#125;<br>Man.prototype.look = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-number">321</span>);<br>        &#125;;<br>        <span class="hljs-comment">//对象的__proto__指向创建出此对象的构造函数的prototype</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> Man(<span class="hljs-string">&#x27;小白&#x27;</span>, <span class="hljs-number">12</span>)<br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> Man(<span class="hljs-string">&#x27;小黑&#x27;</span>, <span class="hljs-number">11</span>)<br>a.__proto__.say()<span class="hljs-comment">//中间的__proto__可以省略，写成a.say()</span><br>a.say()<br>b.look()<br></code></pre></td></tr></table></figure><p><strong>对象原型<u><strong></u>proto<u></strong></u></strong></p><p>1、每个对象都拥有一个<u><strong></u>proto<u></strong></u>属性，其值是一个对象，默认指向创建此对象的构造函数的原型（prototype）</p><p>2、对象在访问<u><strong></u>proto<u></strong></u>下的属性及方法时，可以省略掉<u><strong></u>proto<u></strong></u></p><p>3、对象读取属性时，会先在自身的属性上查找，找不到再去<u><strong></u>proto<u></strong></u>属性指向的对象上去查找</p><h1 id="五：constructor"><a href="#五：constructor" class="headerlink" title="五：constructor"></a><strong>五：constructor</strong></h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Man</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.name = name<br>            <span class="hljs-built_in">this</span>.age = age<br>        &#125;<br><span class="hljs-comment">// Man.prototype.say = function() &#123;</span><br><span class="hljs-comment">//     console.log(123);</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// Man.prototype.look = function() &#123;</span><br><span class="hljs-comment">//     console.log(321);</span><br><span class="hljs-comment">// &#125;;</span><br>Man.prototype = &#123;<br><span class="hljs-title">constructor</span>: <span class="hljs-title">Man</span>,<br><span class="hljs-title">say</span>: <span class="hljs-title">function</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>);<br>            &#125;,<br>look: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>);<br>            &#125;<br>        &#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> Man(<span class="hljs-string">&#x27;小白&#x27;</span>, <span class="hljs-number">12</span>)<br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> Man(<span class="hljs-string">&#x27;小黑&#x27;</span>, <span class="hljs-number">11</span>)<br><span class="hljs-built_in">console</span>.log(a.constructor);<br></code></pre></td></tr></table></figure><p>constructor属性是对象原型（<u><strong></u>proto<u></strong></u>）和构造函数（prototype）原型对象自带的一个属性，它指向构造函数的本身</p><p>在上面的代码中，我们利用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">Man.prototype = &#123;<br><span class="hljs-comment">//constructor: Man,</span><br>say: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>);<br>            &#125;,<br>look: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>);<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>这串代码覆盖掉了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Man</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.name = name<br>            <span class="hljs-built_in">this</span>.age = age<br>        &#125;<br></code></pre></td></tr></table></figure><p>从而最后输出的结果为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">ƒ <span class="hljs-function"><span class="hljs-title">Object</span>(<span class="hljs-params"></span>)</span> &#123; [native code] &#125;<br></code></pre></td></tr></table></figure><p>我们可以使用constructor属性，在覆盖代码中加上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title">constructor</span>: <span class="hljs-title">Man</span>,<br></code></pre></td></tr></table></figure><p>从而让a重新指向被覆盖前的构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Man</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.name = name<br>            <span class="hljs-built_in">this</span>.age = age<br>        &#125;<br></code></pre></td></tr></table></figure><p>得到结果为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">ƒ <span class="hljs-function"><span class="hljs-title">Man</span>(<span class="hljs-params">name, age</span>)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name<br>            <span class="hljs-built_in">this</span>.age = age<br>        &#125;<br></code></pre></td></tr></table></figure><h1 id="六、七：原型链"><a href="#六、七：原型链" class="headerlink" title="六、七：原型链"></a><strong>六、七：原型链</strong></h1><p><img src="C:\Users\chen\Desktop\原型链.png"></p><h1 id="八：对象属性查找规则"><a href="#八：对象属性查找规则" class="headerlink" title="八：对象属性查找规则"></a><strong>八：对象属性查找规则</strong></h1><p>访问对象属性时，会先从对象自身进行查找，以原型链的图为例，先从xm开始找，如果没找到，则向这个对象的原型对象（xm.<u><strong></u>proto<u></strong></u>）,如果还是找不到，则再向上查（A.prototype.<u><strong></u>proto<u></strong></u>）,还是找不到的话，再向上找（Objec.prototype.<u><strong></u>proto<u></strong></u>），直到找到止点，返回null，表示没找到</p><h1 id="九：原型对象中this指向"><a href="#九：原型对象中this指向" class="headerlink" title="九：原型对象中this指向"></a><strong>九：原型对象中this指向</strong></h1><p>不管是构造函数中的this还是原型对象（prototype）的this，都是指向函数的调用者，即谁调用了这个函数，不管this在什么位置，都指向这个调用者</p><h1 id="十：拓展原型对象上的方法"><a href="#十：拓展原型对象上的方法" class="headerlink" title="十：拓展原型对象上的方法"></a><strong>十：拓展原型对象上的方法</strong></h1><p>可以通过修改原型对象（porotype）来增加内置对象上的自定义方法</p><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Array</span>.prototype.sum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.length; i++) &#123;<br>                sum += <span class="hljs-built_in">this</span>[i]<br>            &#125;<br>            <span class="hljs-keyword">return</span> sum<br>        &#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.log(arr.sum());<br><span class="hljs-keyword">var</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>)<br><span class="hljs-built_in">console</span>.log(arr1.sum());<br></code></pre></td></tr></table></figure><p>但是不可以通过下面的方法进行覆盖操作，会导致报错，<strong>内置方法可以新增、修改，但是无法进行覆盖操作</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Array</span>.prototype=&#123;<br>          sum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.length; i++) &#123;<br>                sum += <span class="hljs-built_in">this</span>[i]<br>            &#125;<br>            <span class="hljs-keyword">return</span> sum<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="十一、call与apply、bind方法的作用"><a href="#十一、call与apply、bind方法的作用" class="headerlink" title="十一、call与apply、bind方法的作用"></a><strong>十一、call与apply、bind方法的作用</strong></h1><p>call和apply、bind可以修改函数调用时的<strong>this指向</strong></p><p><strong>下面的代码为比较this的指向问题，即函数内的指向函数，函数外的指向window</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;小明&#x27;</span>,<br>            age = <span class="hljs-number">17</span>;<br>        <span class="hljs-keyword">var</span> obj = &#123;<br>            name: <span class="hljs-string">&#x27;小张&#x27;</span>,<br>            Objage: <span class="hljs-built_in">this</span>.age,<br>            mayFun: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;年龄&#x27;</span> + <span class="hljs-built_in">this</span>.age);<br>            &#125;<br>        &#125;<br><span class="hljs-built_in">console</span>.log(obj.Objage); <span class="hljs-comment">//此处输出17，因为this此时指向window</span><br>obj.mayFun() <span class="hljs-comment">//此处输出小张年龄17，可以知道this.name和this.age中的this指向obj，this.age指向obj，obj中没有age属性，所以显示undefined</span><br><br><span class="hljs-keyword">var</span> fav = <span class="hljs-string">&#x27;瞎子&#x27;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shows</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.fav);<br>        &#125;<br>shows(); <span class="hljs-comment">//此函数this指向window，输出瞎子</span><br></code></pre></td></tr></table></figure><p><strong>下面的代码为确认call与apply、bind之间的差别</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;小明&#x27;</span>,<br>            age = <span class="hljs-number">17</span>;<br>        <span class="hljs-keyword">var</span> obj = &#123;<br>            name: <span class="hljs-string">&#x27;小张&#x27;</span>,<br>            Objage: <span class="hljs-built_in">this</span>.age,<br>            mayFun: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;年龄&#x27;</span> + <span class="hljs-built_in">this</span>.age);<br>            &#125;<br>        &#125; <br><span class="hljs-keyword">var</span> db = &#123;<br>            name: <span class="hljs-string">&#x27;德玛&#x27;</span>,<br>            age: <span class="hljs-number">99</span><br>        &#125;<br>obj.mayFun.call(db); <span class="hljs-comment">//输出结果为德玛年龄99，obj.mayFun.call(db),call后参数用逗号隔开，为obj.mayFun.call(db,1,2,3);</span><br>obj.mayFun.apply(db); <span class="hljs-comment">//输出结果为德玛年龄99，apply的参数是数组，需要用[]，为obj.mayFun.apply(db，[,1,2,3])</span><br>obj.mayFun.bind(db)(); <span class="hljs-comment">//输出结果为德玛年龄99,bind和call、bind不同点为需要在后面再加一个()，由此可得，bind返回值是一个新的函数，需要调用才能执行</span><br></code></pre></td></tr></table></figure><p><strong>下面的代码为确认call与apply、bind之间的传参的差别</strong></p><p>注意，<strong>bind的传参不能用[]包含</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;小明&#x27;</span>,<br>            age = <span class="hljs-number">17</span>;<br>        <span class="hljs-keyword">var</span> obj = &#123;<br>            name: <span class="hljs-string">&#x27;小张&#x27;</span>,<br>            Objage: <span class="hljs-built_in">this</span>.age,<br>            mayFun: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;年龄&#x27;</span> + <span class="hljs-built_in">this</span>.age, <span class="hljs-string">&#x27;来自&#x27;</span> + a + <span class="hljs-string">&#x27;去往&#x27;</span> + b);<br>            &#125;<br>        &#125;<br><span class="hljs-keyword">var</span> db = &#123;<br>            name: <span class="hljs-string">&#x27;德玛&#x27;</span>,<br>            age: <span class="hljs-number">99</span><br>        &#125;<br>obj.mayFun.call(db, <span class="hljs-string">&#x27;成都&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>); <span class="hljs-comment">//输出结果为：德玛年龄99 来自成都去往上海，注意，传参用逗号隔开</span><br>obj.mayFun.apply(db, [<span class="hljs-string">&#x27;成都&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>]); <span class="hljs-comment">//输出结果为：德玛年龄99 来自成都去往上海，注意，apply的传参需要用[]包含起来，里面的逗号和call一致</span><br>obj.mayFun.bind(db, <span class="hljs-string">&#x27;成都&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>)(); <span class="hljs-comment">//输出结果为：德玛年龄99 来自成都去往上海，注意，传参用逗号隔开，且需要再加上一个()，意为调用，由此可得，bind返回值是一个新的函数，需要调用才能执行</span><br>obj.mayFun.bind(db, [<span class="hljs-string">&#x27;成都&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>])(); <span class="hljs-comment">//输出结果为：德玛年龄99 来自成都,上海去往undefined，此处为错误用法</span><br></code></pre></td></tr></table></figure><p>最后，call、apply、bind三者的<strong>传参可以为任意类型</strong></p><h1 id="十二、使用父类构造函数继承属性"><a href="#十二、使用父类构造函数继承属性" class="headerlink" title="十二、使用父类构造函数继承属性"></a><strong>十二、使用父类构造函数继承属性</strong></h1><p>下面的代码中的 <strong>Father.call(this, uname, age)**为利用</strong>call()**将父类的实例对象this手动修改为子类的实例对象this。</p><p>注意，<strong>call()继承父类时，需要将公式写在子类中</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>            <span class="hljs-built_in">this</span>.uname = uname;<br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>            Father.call(<span class="hljs-built_in">this</span>, uname, age)<br>        &#125;<br><span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> Son(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">11</span>)<br></code></pre></td></tr></table></figure><h1 id="十三、利用原型对象继承方法"><a href="#十三、利用原型对象继承方法" class="headerlink" title="十三、利用原型对象继承方法"></a><strong>十三、利用原型对象继承方法</strong></h1><p>下面的代码为利用原型对象继承方法，其中有两种写法：</p><p>第一种方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>            <span class="hljs-title">constructor</span>: <span class="hljs-title">Son</span>,<br>            <span class="hljs-title">__proto__</span>: <span class="hljs-title">Father</span>.<span class="hljs-title">prototype</span><br>        &#125;<br><span class="hljs-title">Son</span>.<span class="hljs-title">prototype</span> = <span class="hljs-title">obj</span><br></code></pre></td></tr></table></figure><p>此处原理为var一个新的对象，将<strong>父类的prototype（原型对象）赋值给这个对象的<u><strong></u>proto<u></strong></u>**，那么就相当于obj.<u><strong></u>proto<u></strong></u>是Fathe.prototype,再把obj整个赋值给Son.prototype，这样就不会在更改子类属性的时候影响到父类的属性，保持了</strong>子类对于父类的单线继承<strong>，最后需要</strong>利用constructor将obj重新指向Son构造函数**</p><p>第二种方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">Son.prototype = <span class="hljs-keyword">new</span> Father()<br></code></pre></td></tr></table></figure><p>原理与第一种方法一致，此为更简单的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.uname = uname;<br>            <span class="hljs-built_in">this</span>.age = age;<br><br>        &#125;<br>Father.prototype.sleep = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;要睡觉&#x27;</span>);<br>        &#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br>            <span class="hljs-title">constructor</span>: <span class="hljs-title">Son</span>,<br>            <span class="hljs-title">__proto__</span>: <span class="hljs-title">Father</span>.<span class="hljs-title">prototype</span><br>        &#125;<br><span class="hljs-title">Son</span>.<span class="hljs-title">prototype</span> = <span class="hljs-title">obj</span><br><br>// <span class="hljs-title">Son</span>.<span class="hljs-title">prototype</span> = <span class="hljs-title">new</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>)<br><span class="hljs-title">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>) &#123;<br><br>        &#125;<br><span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> Son(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">12</span>)<br><span class="hljs-built_in">console</span>.log(xm);<br><span class="hljs-built_in">console</span>.log(Father.prototype);<br></code></pre></td></tr></table></figure><p><img src="D:\desk\js高级\lesson002\利用原型对象继承方法图示.png"></p><h1 id="十四、类的本质"><a href="#十四、类的本质" class="headerlink" title="十四、类的本质"></a>十四、类的本质</h1><p> <strong>es6 之前构造函数的特点:</strong></p><p>​    <strong>1. 构造函数默认有一个 prototype 属性, 它的值是一个对象</strong></p><p>​    <strong>2. 构造函数 prototype 属性下有 constructor 和<u><strong></u>proto<u></strong></u>两个默认的属性</strong></p><p>​    <strong>3. 构造函数可以通过在 prototype 上添加方法, 去实现所有实例继承</strong></p><p>​    <strong>4. 构造函数创建的实例上 <u><strong></u>proto<u></strong></u>指向创建它构造函数的 prototype</strong></p><p>​    <strong>class 类的本质其实就是一个改造版的构造函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Man</span> </span>&#123;<br>            <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">uname, age</span>)</span> &#123;<br>                <span class="hljs-built_in">this</span>.uname = uname;<br>                <span class="hljs-built_in">this</span>.age = age;<br>            &#125;<br>            <span class="hljs-function"><span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;说话&#x27;</span>);<br>            &#125;<br>        &#125;<span class="hljs-comment">//class为改造版的构造函数</span><br>Man.prototype.run = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">//通过在prototype上添加方法，实现实例继承,将run继承进Man构造函数</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;跑&#x27;</span>);<br>        &#125;<br><span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> Man(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">12</span>)<br><span class="hljs-built_in">console</span>.log(xm);<br><span class="hljs-built_in">console</span>.log(xm.run);<br><span class="hljs-built_in">console</span>.log(xm.say);<br>xm.run();<br>xm.say();<br></code></pre></td></tr></table></figure><h1 id="十五、十六、ES5数组新增方法"><a href="#十五、十六、ES5数组新增方法" class="headerlink" title="十五、十六、ES5数组新增方法"></a>十五、十六、ES5数组新增方法</h1><p><strong>1. forEach() 方法可以快速地遍历数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>];<br>sum = <span class="hljs-number">0</span>;<br>arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, arr</span>) </span>&#123;<br>            sum += item<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;元素&#x27;</span> + item + <span class="hljs-string">&#x27;的索引号是&#x27;</span> + index);<br>            <span class="hljs-built_in">console</span>.log(arr);<br>        &#125;)<br><span class="hljs-built_in">console</span>.log(sum);<br></code></pre></td></tr></table></figure><p>forEach()<strong>没有返回值</strong>，所以不需要用到return，参数为**(元素, 索引, 数组本身)**，参数可以只写一个或两个</p><p><strong>2. filter() 方法从数组筛选出符合条件的一组元素</strong></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">21</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">24</span>]<br><span class="hljs-keyword">var</span> res = arr1.filter(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item, <span class="hljs-keyword">index</span>)</span> <span class="hljs-comment">&#123;</span></span><br><span class="hljs-function"><span class="hljs-comment">            return item % 2 == 0;</span></span><br><span class="hljs-function"><span class="hljs-comment">        &#125;</span>)</span><br><span class="hljs-function"><span class="hljs-title">console</span>.<span class="hljs-title">log</span><span class="hljs-params">(res)</span>;</span><br></code></pre></td></tr></table></figure><p>filter() 的<strong>返回值是一个数组</strong>，所以可以使用return来进行存储，参数为**(元素, 索引, 数组本身)**，参数可以只写一个或两个</p><p> <strong>3. some() 方法用于查找数组中是否有符合条件的某一个元素</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;12&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;true&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>]<br><span class="hljs-keyword">var</span> res = arr.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> item == <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;)<br><span class="hljs-built_in">console</span>.log(res);<br></code></pre></td></tr></table></figure><p>some()的<strong>返回值是false或者true</strong>，false表示没找到，true表示找到，可以使用return来进行存储。</p><p>参数为**(元素, 索引, 数组本身)**，参数可以只写一个或两个。</p><p><strong>4. every() 方法用于查找数组中是否所有的元素都符合条件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr3 = [<span class="hljs-number">30</span>, <span class="hljs-number">22</span>, <span class="hljs-number">45</span>, <span class="hljs-number">20</span>]<br><span class="hljs-keyword">var</span> res2 = arr3.every(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> item &gt;= <span class="hljs-number">20</span><br>        &#125;)<br><span class="hljs-built_in">console</span>.log(res2);<br></code></pre></td></tr></table></figure><p>every()的<strong>返回值是false和true</strong>，true表示全部符合条件，但只要有一个不符合条件就返回false，可以使用return来进行存储。</p><p>参数为**(元素, 索引, 数组本身)**，参数可以只写一个或两个。</p><h1 id="十七、商品查询案例"><a href="#十七、商品查询案例" class="headerlink" title="十七、商品查询案例"></a>十七、商品查询案例</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>        table &#123;<br>            width: 400px;<br><span class="css">            <span class="hljs-selector-tag">border</span>: 1<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-id">#000</span>;</span><br>            border-collapse: collapse;<br>            margin: 0 auto;<br>        &#125;<br>        <br>        td,<br>        th &#123;<br><span class="css">            <span class="hljs-selector-tag">border</span>: 1<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-id">#000</span>;</span><br>            text-align: center;<br>        &#125;<br>        <br>        input &#123;<br>            width: 50px;<br>        &#125;<br>        <br><span class="css">        <span class="hljs-selector-class">.search</span> &#123;</span><br>            width: 600px;<br>            margin: 20px auto;<br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span><br>        按照价格查询: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span> - <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;end&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search-price&quot;</span>&gt;</span>搜索<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> 按照商品名称查询: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;product&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search-pro&quot;</span>&gt;</span>查询<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>产品名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-comment">// 需求：根据输入的不同的条件，筛选得到一个商品列表</span></span><br><span class="javascript">        <span class="hljs-comment">// 1. 准备渲染页面的数据</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> data = [&#123;</span><br>            id: 1,<br><span class="javascript">            pname: <span class="hljs-string">&#x27;小米&#x27;</span>,</span><br>            price: 3999<br>        &#125;, &#123;<br>            id: 2,<br><span class="javascript">            pname: <span class="hljs-string">&#x27;oppo&#x27;</span>,</span><br>            price: 999<br>        &#125;, &#123;<br>            id: 3,<br><span class="javascript">            pname: <span class="hljs-string">&#x27;荣耀&#x27;</span>,</span><br>            price: 1299<br>        &#125;, &#123;<br>            id: 4,<br><span class="javascript">            pname: <span class="hljs-string">&#x27;华为&#x27;</span>,</span><br>            price: 1999<br>        &#125;, ]<br><span class="javascript">        <span class="hljs-keyword">var</span> tbody = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;tbody&#x27;</span>); <span class="hljs-comment">//获取tbody</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> start = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.start&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> end = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.end&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.search-price&#x27;</span>)</span><br><span class="javascript">        <span class="hljs-keyword">var</span> btn2 = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.search-pro&#x27;</span>)</span><br><span class="javascript">        <span class="hljs-keyword">var</span> product = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.product&#x27;</span>)</span><br><span class="javascript">            <span class="hljs-comment">//1、遍历数组，将tr放进tbody</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">renderDate</span>(<span class="hljs-params">data</span>) </span>&#123; <span class="hljs-comment">//1.1将数组数据渲染到页面上</span></span><br><span class="javascript">            tbody.innerHTML = <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">//2.4将tbody清空</span></span><br><span class="javascript">            data.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123; <span class="hljs-comment">//1.2遍历数组</span></span><br><br><span class="handlebars"><span class="xml">                var tr = &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#x27; + item.id + &#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#x27; + item.pname + &#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#x27; + item.price + &#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>&#x27;; //1.3声明tr，拼接出tr</span></span><br><span class="javascript">                tbody.innerHTML += tr; <span class="hljs-comment">//1.4将tr放进tbody中</span></span><br>            &#125;)<br>        &#125;<br><span class="javascript">        renderDate(data) <span class="hljs-comment">//1.5调用渲染函数</span></span><br><span class="javascript">            <span class="hljs-comment">//2、筛选数组，将tr放进tbody</span></span><br><span class="javascript">        btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//2.1给btn；绑定点击事件</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> newDate = data.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123; <span class="hljs-comment">//2.2通过filter对data进行筛选</span></span><br><span class="javascript">                <span class="hljs-keyword">return</span> item.price &gt;= start.value &amp;&amp; item.price &lt;= end.value <span class="hljs-comment">//2.3先判断，再返回</span></span><br>            &#125;)<br><span class="javascript">            renderDate(newDate) <span class="hljs-comment">//2.5调用渲染函数</span></span><br>        &#125;)<br><br><span class="javascript">        btn2.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//2.1给btn；绑定点击事件</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> newDate = data.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123; <span class="hljs-comment">//2.2通过filter对data进行筛选</span></span><br><span class="javascript">                <span class="hljs-keyword">return</span> item.pname == product.value</span><br>            &#125;)<br><span class="javascript">            renderDate(newDate) <span class="hljs-comment">//2.5调用渲染函数</span></span><br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="十八、字符串遍历方法"><a href="#十八、字符串遍历方法" class="headerlink" title="十八、字符串遍历方法"></a>十八、字符串遍历方法</h1><p>  <strong>1. forEach() 方法不会终止整个遍历(不管如何都会完整地遍历数组)</strong></p><p>  <strong>2. filter() 方法也不会终止整个遍历, 用来筛选符合条件的所有元素</strong></p><p>  <strong>3. every() 方法用于判断数组中是否所有的元素都符合条件, return false 会终止整个遍历过程</strong></p><p> <strong>4. some() 方法判断数组中是否有唯一符合条件的元素, 遇到 return true 会终止整个遍历</strong></p><h1 id="十九、字符串去除两边空格"><a href="#十九、字符串去除两边空格" class="headerlink" title="十九、字符串去除两边空格"></a>十九、字符串去除两边空格</h1><p>使用 <strong>trim() **方法去除字符串两端的空格，例如</strong>Object.trim()<strong>，则会清除Object上</strong>字符串两端的空格**</p><p>注意，只能清除字符串两端的空格</p><p>假如var Object={‘’,’’,2,3,’’,’’,58,’’,6,’’,’’}</p><p>清除开头的空格：<strong>Object.trimStart()</strong></p><p>清除结尾的空格：<strong>Object.trimEnd()</strong></p><p>清除所有空格：<strong>Object.replace(/\s/g, “”)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-built_in">Object</span> = <span class="hljs-string">&#x27; 4546 4615   &#x27;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.trimStart());<span class="hljs-comment">//清除开头的空格：Object.trimStart()</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.trimEnd());<span class="hljs-comment">//清除结尾的空格：Object.trimEnd()</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.replace(<span class="hljs-regexp">/\s/g</span>, <span class="hljs-string">&quot;&quot;</span>));<span class="hljs-comment">//清除所有空格：Object.replace(/\s/g, &quot;&quot;)</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-comment">// 1. 使用 trim() 方法去除字符串两端的空格</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> ipt = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;input&#x27;</span>)</span><br><span class="javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>)</span><br><span class="javascript">        btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (ipt.value.trim() == <span class="hljs-string">&#x27;&#x27;</span>) &#123;</span><br><span class="javascript">                alert(<span class="hljs-string">&#x27;请输入有效值&#x27;</span>)</span><br>            &#125;<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="二十、Object-keys方法获取属性名"><a href="#二十、Object-keys方法获取属性名" class="headerlink" title="二十、Object.keys方法获取属性名"></a>二十、Object.keys方法获取属性名</h1><p>使用<strong>Object.keys()</strong> 方法获取对象上所有的属性名</p><p>通过<strong>Object.keys()**方法获取到的属性名会被储存到数组中，所以</strong>返回值是一个数组**</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>            a: <span class="hljs-number">1</span>,<br>            b: <span class="hljs-number">2</span>,<br>            c: <span class="hljs-number">3</span><br>        &#125;<br><span class="hljs-keyword">var</span> res = <span class="hljs-built_in">Object</span>.keys(obj)<span class="hljs-comment">//获取obj的属性名，结果为[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br><span class="hljs-built_in">console</span>.log(res);<br><span class="hljs-comment">// 新遍历对象的方法</span><br>res.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(obj[item]);<span class="hljs-comment">//遍历出obj的属性值</span><br>        &#125;)<br></code></pre></td></tr></table></figure><h1 id="二十一、Object-defineProperty方法"><a href="#二十一、Object-defineProperty方法" class="headerlink" title="二十一、Object.defineProperty方法"></a>二十一、Object.defineProperty方法</h1><p>1、Object.defineProperty() 方法的作用：[VUE 响应式的核心 2.x]</p><p><strong>在对象上定义一个新属性，或者修改原属性，并返回对象</strong></p><p>2、使用方法：</p><p>   <strong>Object.defineProperty(obj, prop, descriptor)</strong></p><p>   (1) obj: 要定义属性的对象</p><p>   (2) prop: 要定义或修改的属性的名称, 字符串 ‘name’</p><p>   (3) descriptor: 要定义或修改的属性描述符, 数据格式是对象 {}</p><p>  3、属性的描述符</p><p>   (1) value: 属性值    <strong>可以为任意类型数据</strong></p><p>   (2) writable: 是否可以修改   <strong>rue或者false</strong></p><p>   (3) enumerable: 是否可以枚举（遍历到）  <strong>true或者false</strong></p><p>   (4) configurable: 是否可以删除或再次修改特性    <strong>true或者false</strong></p><p>  <strong>三个属性描述符默认都是 false</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>            name: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>            age: <span class="hljs-number">12</span>,<br>            sex: <span class="hljs-string">&#x27;男&#x27;</span><br>        &#125;<br><span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&#x27;eat&#x27;</span>, &#123;<span class="hljs-comment">//给obj添加eat属性</span><br>            value: <span class="hljs-literal">false</span>,<br>            writable: <span class="hljs-literal">true</span>,<span class="hljs-comment">//是否可读写，是否可以修改属性的值</span><br>            enumerable: <span class="hljs-literal">true</span>,<span class="hljs-comment">//是否可遍历，是否可枚举</span><br>            configurable: <span class="hljs-literal">true</span>,<span class="hljs-comment">//是否可删除和修改</span><br>        &#125;)<br><span class="hljs-built_in">console</span>.log(obj);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/01/28/js%E9%AB%98%E7%BA%A7006/"/>
    <url>/2021/01/28/js%E9%AB%98%E7%BA%A7006/</url>
    
    <content type="html"><![CDATA[<h1 id="一、声明变量"><a href="#一、声明变量" class="headerlink" title="一、声明变量"></a>一、声明变量</h1><p>声明变量分为<strong>let</strong>与<strong>const</strong></p><h2 id="let-声明变量："><a href="#let-声明变量：" class="headerlink" title="let 声明变量："></a><strong>let 声明变量</strong>：</h2><ol><li><p>具有块级作用域, 只能在块级或字块中进行访问</p></li><li><p>存在”暂存死区”(  只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，</p><p>   只有等到声明变量的那一行代码出现，才可以获取和使用该变量。  )</p></li><li><p>不会进行变量提升, 先声明再使用</p></li><li><p>同一作用域下不能重复声明同一变量</p></li><li><p> 声明的变量不会挂载在 window 对象上 </p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// es6 中的作用域: 3种（局部作用域、全局作用域、块级作用域）</span><br><br>       <span class="hljs-comment">// 1. 只在声明时的块或子块中可用</span><br>       &#123;<br>           <span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span>; &#123;<br>               <span class="hljs-built_in">console</span>.log(num);<br>           &#125;<br><br>       &#125;<br>       <span class="hljs-built_in">console</span>.log(num);<br><br>       <span class="hljs-comment">// 1.1 if 判断语句 中使用 let</span><br>       <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>           <span class="hljs-keyword">let</span> num1 = <span class="hljs-number">1</span>;<br>           <span class="hljs-built_in">console</span>.log(num1);<br>       &#125;<br>       <span class="hljs-built_in">console</span>.log(num1);<br><br>       <span class="hljs-comment">// 1.2 for 循环中使用 let</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>           <span class="hljs-built_in">console</span>.log(i);<br>       &#125;<br>       <span class="hljs-built_in">console</span>.log(i);<br><br>       <span class="hljs-comment">// 2. 不存在变量提升，只能先声明再使用</span><br>       <span class="hljs-built_in">console</span>.log(res);<br>       <span class="hljs-keyword">let</span> res = <span class="hljs-number">1</span>;<br><br>       <span class="hljs-comment">// 3. 存在“暂存死区” ==&gt; 存在但是无法访问到 (目的: 要求变量必须先声明再使用)</span><br>       <span class="hljs-keyword">var</span> res1 = <span class="hljs-number">1</span>; &#123;<br>           <span class="hljs-built_in">console</span>.log(res1);<br>           <span class="hljs-keyword">let</span> res1 = <span class="hljs-number">1</span>;<br>       &#125;<br><br>       <span class="hljs-comment">// 4. 声明的变量不会挂载在 window 对象上 </span><br>       <span class="hljs-keyword">let</span> res2 = <span class="hljs-number">1</span>;<br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.res2);<br><br>       <span class="hljs-comment">// 5. 同一作用域下不能重复声明同一变量</span><br>       <span class="hljs-keyword">let</span> res3 = <span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">let</span> res3 = <span class="hljs-number">1</span>;<br>       <span class="hljs-built_in">console</span>.log(res3);<br></code></pre></td></tr></table></figure><h2 id="const-声明变量："><a href="#const-声明变量：" class="headerlink" title="const 声明变量："></a><strong>const 声明变量</strong>：</h2><p><strong>let方法有的特性，const方法都有</strong></p><p>原始数据类型：<strong>number,string,boolean,undefined, null,object</strong></p><p><strong>简单数据类型(基本类型)**：</strong>值类型: number(数字型),string(字符串),boolean(布尔型)，undefined()，Null()**</p><p><strong>复杂数据类型</strong>：<strong>Object</strong></p><p>const拥有let方法没有的特性：</p><ol><li>声明常量的时候<strong>必须初始化(必须赋值)</strong></li><li>如果值是<strong>简单数据类型</strong>, <strong>不能直接修改和赋值</strong></li><li>如果值是<strong>复杂数据类型</strong>, <strong>可以去修改对象里面的属性或方法</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  1. 声明常量时必须要初始化值</span><br><br><span class="hljs-keyword">const</span> num;<span class="hljs-comment">//错误方法，需要初始化(赋值)</span><br><br><span class="hljs-comment">//  2. 同样具有块级作用域和 “暂存死区”</span><br><br><span class="hljs-keyword">var</span> num1 = <span class="hljs-number">1</span>; &#123;<br>    <span class="hljs-built_in">console</span>.log(num1);<span class="hljs-comment">//暂存死区，变量存在，但不可获取，</span><br>    <span class="hljs-keyword">const</span> num1 = <span class="hljs-number">2</span>;<span class="hljs-comment">//只有先声明，才可获取</span><br>&#125;<br><br><span class="hljs-comment">//  3. const 常量赋值为简单数据类型时，不能直接修改值</span><br><br><span class="hljs-keyword">const</span> num2 = <span class="hljs-number">1</span>;<span class="hljs-comment">//简单数据类型，无法修改值</span><br><span class="hljs-keyword">const</span> num2 = <span class="hljs-number">3</span>;<br><br><span class="hljs-comment">//  4. const 常量赋值为复杂数据类型时，可以修改对象内部的属性和方法</span><br><span class="hljs-keyword">const</span> num3 = &#123;<br>    a: <span class="hljs-number">1</span>,<br>    b: <span class="hljs-number">2</span><br>&#125;<br>num3.a = <span class="hljs-number">2</span><br><span class="hljs-built_in">console</span>.log(num3);<br><span class="hljs-comment">// 注意: const 常量不能重新赋值一个新对象, 因为地址值发生了改变</span><br></code></pre></td></tr></table></figure><h1 id="二、解构赋值"><a href="#二、解构赋值" class="headerlink" title="二、解构赋值"></a>二、解构赋值</h1><p><strong>解构赋值就是可以从数组或对象中，把值取出来，再赋值给对应的变量</strong></p><h2 id="对数组进行解构"><a href="#对数组进行解构" class="headerlink" title="对数组进行解构"></a>对数组进行解构</h2><p> (1) 没有解构成功的变量，值为 undefined</p><p> (2) 变量的位置和数组中值的位置一一对应</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 对数组进行解构</span><br>      <span class="hljs-keyword">const</span> num = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br>      <span class="hljs-keyword">let</span> [a, b, c, d] = num;<br>      <span class="hljs-built_in">console</span>.log(a, b, c, d);<span class="hljs-comment">//输出1，2，3，4</span><br><br><br>      <span class="hljs-comment">// 2. 没有解构成功的变量，值为 undefined</span><br>      <span class="hljs-keyword">const</span> num1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br>      <span class="hljs-keyword">let</span> [a, b, c, d, e] = num1;<br>      <span class="hljs-built_in">console</span>.log(a, b, c, d, e);<span class="hljs-comment">//输出1，2，3，4，underfined，最后没有被解构成功的e被输出为underfined</span><br><br><br>      <span class="hljs-comment">// 3. 不需要解构的元素可以使用 逗号 隔开</span><br>      <span class="hljs-keyword">const</span> num2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br>      <span class="hljs-keyword">let</span> [, b, , d] = num2;<span class="hljs-comment">//不需要解析的用逗号代替，不需要多个就用多个逗号隔开</span><br>      <span class="hljs-built_in">console</span>.log(b, d);<span class="hljs-comment">//此处输出2，4，对应b,d</span><br><br>      <span class="hljs-comment">// 4. 交换两个变量</span><br>      <span class="hljs-keyword">let</span> num3 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br>      <span class="hljs-keyword">let</span> num4 = [<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>];<br>      [num3, num4] = [num4, num3];<span class="hljs-comment">//此时的就是将num3与num4的位置相互颠倒</span><br>      <span class="hljs-built_in">console</span>.log(num3, num4);<span class="hljs-comment">//此时num3=[4, 3, 2, 1];,num4=[1, 2, 3, 4];</span><br><br><br>      <span class="hljs-comment">// 注意: 无分号写法中, 以 () 或 [] 开头的语句前要加分隔符(! ;)</span><br></code></pre></td></tr></table></figure><h2 id="对对象进行解析"><a href="#对对象进行解析" class="headerlink" title="对对象进行解析"></a>对对象进行解析</h2><p> (1) 没有解构成功的变量，值为 undefined</p><p> (2) 变量的名称和属性名一一对应</p><p> (3) 变量名的顺序和数量没有要求（此项与对数组解构不同）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>          name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>          age: <span class="hljs-number">18</span>,<br>          height: <span class="hljs-string">&#x27;175cm&#x27;</span>,<br>          weight: <span class="hljs-string">&#x27;65kg&#x27;</span><br>      &#125;;<br>      <span class="hljs-comment">// 从对象中解构出 name 和 height 的属性值</span><br>      <span class="hljs-keyword">let</span> &#123;<br>          name,<br>          height<br>      &#125; = obj;<br>      <span class="hljs-built_in">console</span>.log(name, height);<span class="hljs-comment">//输出张三 175cm</span><br><br><br>      <span class="hljs-comment">// 没有解构成功的变量，值为 undefined</span><br>      <span class="hljs-keyword">let</span> &#123;<br>          name,<br>          height,<br>          ccc<br>      &#125; = obj;<br>      <span class="hljs-built_in">console</span>.log(name, height, ccc);<span class="hljs-comment">//输出张三 175cm underfined,因为ccc没有解构成功</span><br><br>      <span class="hljs-comment">// 变量名的顺序和数量没有要求</span><br></code></pre></td></tr></table></figure><h2 id="对象解构赋值别名"><a href="#对象解构赋值别名" class="headerlink" title="对象解构赋值别名"></a>对象解构赋值别名</h2><p>对象解构赋值别名，就是给解构后的变量取个变量名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>          name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>          age: <span class="hljs-number">18</span>,<br>          height: <span class="hljs-string">&#x27;175cm&#x27;</span>,<br>          weight: <span class="hljs-string">&#x27;65kg&#x27;</span><br>      &#125;<br>      <span class="hljs-keyword">let</span> &#123;<br>          name: name1,<span class="hljs-comment">//将name取个别名name1</span><br>          age: age1<span class="hljs-comment">//将age取个别名age1</span><br>      &#125; = obj;<br>      <span class="hljs-built_in">console</span>.log(name1, age1);<span class="hljs-comment">//此时的name1,age1所对应的值为&#x27;张三&#x27;，18,所以此时输出为&#x27;张三&#x27;，18</span><br><br><br>      <span class="hljs-keyword">let</span> foo = &#123;<br>          name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>          age: <span class="hljs-number">18</span>,<br>          height: <span class="hljs-string">&#x27;175cm&#x27;</span>,<br>          weight: <span class="hljs-string">&#x27;65kg&#x27;</span>,<br>          say: &#123;<br>              name: <span class="hljs-string">&#x27;李四&#x27;</span>,<br>              age: <span class="hljs-number">90</span>,<br>          &#125;<br>      &#125;<br>      <span class="hljs-keyword">let</span> &#123;<br>          say: &#123;<br>              name: name1,<span class="hljs-comment">//给name取个别名name1</span><br>              age: age1<span class="hljs-comment">//给age取个别名age1</span><br>          &#125;<br>      &#125; = foo;<br>      <span class="hljs-built_in">console</span>.log(name1, age1);<span class="hljs-comment">//此时依据别名输出&#x27;张三&#x27;，18</span><br></code></pre></td></tr></table></figure><h1 id="三、箭头函数"><a href="#三、箭头函数" class="headerlink" title="三、箭头函数"></a>三、箭头函数</h1><p>表达式为： **() =&gt; {} **</p><p>特点为：</p><ol><li><p>一般不会单独使用, 可以当做匿名函数进行赋值 \ 传参 \ 返回值</p></li><li><p><strong>如果函数体只有一行代码，并代码执行结果就是返回值, 可以同时省略大括号和 return</strong></p></li><li><p><strong>如果形参只有一个, 可以省略小括号</strong></p></li><li><p>内部没有 arguments 这个内置对象</p></li><li><p><strong>箭头函数没有自己的this, 取的是外层的 this</strong></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 定义一个箭头函数</span><br>   <span class="hljs-keyword">var</span> res = <span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(i);<br>   res(<span class="hljs-number">5</span>)<br><br>   <span class="hljs-comment">// 计算两个数的和</span><br>   <span class="hljs-keyword">var</span> arr = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b;<br>   arr(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><br><br>   <span class="hljs-comment">// 2. 函数体只有一行代码, 结果就是返回值时, 可以直接省略大括号 </span><br><br><br>   <span class="hljs-comment">// 使用箭头函数遍历数组</span><br>   <span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><br>   arr1.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(item))<br><br><br><br>   <span class="hljs-comment">// 3. 如果形参只有一个, 可以省略小括号</span><br><br><br>   <span class="hljs-comment">// 筛选出数组中所有的偶数</span><br>   <span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br></code></pre></td></tr></table></figure><h1 id="四、剩余参数"><a href="#四、剩余参数" class="headerlink" title="四、剩余参数"></a>四、剩余参数</h1><h2 id="函数形参中"><a href="#函数形参中" class="headerlink" title="函数形参中"></a>函数形参中</h2><p>剩余参数语法(…变量名): 允许我们将剩下的所有参数表示为一个数组</p><p>rest 变量接受所有的实参, 是一个数组</p><p>const fn = (…rest) =&gt; { console.log(rest) }</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> getSum = <span class="hljs-function">(<span class="hljs-params">...rest</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;<br>            rest.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> sum += item);<br>            <span class="hljs-built_in">console</span>.log(sum);<br>        &#125;<br>getSum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><h2 id="数组解构中"><a href="#数组解构中" class="headerlink" title="数组解构中"></a>数组解构中</h2><p><strong>let […rest] = [1, 2, 3]</strong></p><p><strong>rest 是一个新数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 剩余参数使用在解构赋值中, 表示数组中剩余的所有元素 ，或者对象中剩余的所有属性</span><br>      <span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;black&#x27;</span>]<br>      <span class="hljs-keyword">const</span> obj = &#123;<br>          name: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>          age: <span class="hljs-number">12</span>,<br>          height: <span class="hljs-string">&#x27;170cm&#x27;</span>,<br>          weight: <span class="hljs-string">&#x27;135kg&#x27;</span>,<br>      &#125;<br><br>      <span class="hljs-comment">// 把数组中剩下的元素组成新的数组</span><br>      <span class="hljs-keyword">let</span> [foo, ...rest] = arr;<br>      <span class="hljs-built_in">console</span>.log(foo);<br>      <span class="hljs-built_in">console</span>.log(rest);<br></code></pre></td></tr></table></figure><h2 id="对象解构中"><a href="#对象解构中" class="headerlink" title="对象解构中"></a>对象解构中</h2><p><strong>let {…rest} = {a: 1, b: 2}</strong></p><p><strong>rest 是一个新对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 把对象剩下的属性组成一个新对象</span><br>   <span class="hljs-keyword">let</span> &#123;<br>       name,<br>       ...rest1<br>   &#125; = obj;<br>   <span class="hljs-built_in">console</span>.log(name);<br>   <span class="hljs-built_in">console</span>.log(rest1);<br><br>   <span class="hljs-comment">// 3. 使用剩余参数快速实现浅拷贝</span><br>   <span class="hljs-keyword">let</span> &#123;<br>       ...rest2<br>   &#125; = obj;<br>   <span class="hljs-built_in">console</span>.log(rest2);<br></code></pre></td></tr></table></figure><h1 id="五、拓展运算符"><a href="#五、拓展运算符" class="headerlink" title="五、拓展运算符"></a>五、拓展运算符</h1><p><strong>拓展运算符（展开语法 或 spred运算符） …对象名 或 …数组名</strong></p><p><strong>作用：把数组或对象转为用逗号分隔的参数形式</strong></p><h2 id="拓展对象"><a href="#拓展对象" class="headerlink" title="拓展对象"></a>拓展对象</h2><p><strong>{…obj}</strong></p><h2 id="拓展数组"><a href="#拓展数组" class="headerlink" title="拓展数组"></a>拓展数组</h2><p><strong>[…arr]</strong></p><p><strong>arr.push(…arr)</strong></p><h2 id="拓展字符串"><a href="#拓展字符串" class="headerlink" title="拓展字符串"></a>拓展字符串</h2><p><strong>console.log(…str)</strong></p><h2 id="拓展伪数组"><a href="#拓展伪数组" class="headerlink" title="拓展伪数组"></a>拓展伪数组</h2><p><strong>[….spans]</strong></p><h2 id="拓展-set-数据"><a href="#拓展-set-数据" class="headerlink" title="拓展 set 数据"></a>拓展 set 数据</h2><p><strong>[…mySet]</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// 拓展运算符的应用</span><br>   <span class="hljs-comment">// 1. 用来合并数组</span><br>   <span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>   <span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br>   <span class="hljs-keyword">var</span> res = arr1.concat(arr2);<br>   <span class="hljs-built_in">console</span>.log(res);<br><br>   <span class="hljs-comment">// arr1.push(...arr2);</span><br>   <span class="hljs-comment">// console.log(arr1);</span><br><br>   <span class="hljs-keyword">var</span> res2 = [...arr1, ...arr2];<br>   <span class="hljs-built_in">console</span>.log(res2);<br><br>   <span class="hljs-comment">// 2. 求数组中的最大值</span><br>   <span class="hljs-keyword">const</span> arr3 = [<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>];<br>   <span class="hljs-keyword">var</span> res3 = <span class="hljs-built_in">Math</span>.max(...arr1, ...arr2);<br>   <span class="hljs-built_in">console</span>.log(res3);<br><br><br>   <span class="hljs-keyword">var</span> obj1 = &#123;<br>       name: <span class="hljs-string">&#x27;xm&#x27;</span>,<br>       age: <span class="hljs-number">10</span><br>   &#125;<br>   <span class="hljs-keyword">var</span> obj2 = &#123;<br>       id: <span class="hljs-number">12</span>,<br>       name: <span class="hljs-string">&#x27;dm&#x27;</span><br>   &#125;<br>   <span class="hljs-built_in">console</span>.log(&#123;...obj1 <span class="hljs-comment">//拓展对象的结果需要使用&#123;&#125;来存储</span><br>   &#125;);<br>   <span class="hljs-built_in">console</span>.log(&#123;...obj1, <span class="hljs-comment">//合并对象，相同的属性会被下面的属性所覆盖</span><br>       ...obj2<br>   &#125;);<br><br>   <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>   <span class="hljs-built_in">console</span>.log(...str); <span class="hljs-comment">//输出str字符串的每个字符</span><br><br><br><br><span class="hljs-comment">// 1. 使用拓展运算符拓展字符串和伪数组</span><br><br>   <span class="hljs-keyword">var</span> spans = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;span&#x27;</span>)<br><br>   <span class="hljs-keyword">const</span> arr = [...spans];<br><br><br>   arr.push(<span class="hljs-number">123</span>);<br>   <span class="hljs-built_in">console</span>.log(arr);<br></code></pre></td></tr></table></figure><h1 id="六、模板字符串"><a href="#六、模板字符串" class="headerlink" title="六、模板字符串"></a>六、模板字符串</h1><p> <strong>模板字符串 (强大的字符串变量拼接语法)</strong></p><p>使用<strong>反引号</strong>定义（··）</p><p>特性：</p><ol><li><p>可以支持换行</p></li><li><p>支持和变量进行拼接 ${变量名}</p></li><li><ol start="3"><li>${可以放任意的表达式}</li></ol></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js">    <span class="hljs-comment">// 1. 使用反引号（``）代替单双引号，</span><br>        <span class="hljs-keyword">let</span> res = <span class="hljs-string">`hi`</span>;<br>        <span class="hljs-built_in">console</span>.log(res);<br><br>        <span class="hljs-comment">// 使用 $&#123;变量名或表达式&#125; 代替原来的 &#x27;引引加加&#x27;</span><br>        <span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;张三&#x27;</span>;<br>        <span class="hljs-keyword">let</span> sex = <span class="hljs-string">&#x27;男&#x27;</span>;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span>的性别是<span class="hljs-subst">$&#123;sex&#125;</span>`</span>);<br><br>        <span class="hljs-comment">// 2. 模板字符串支持换行</span><br>        <span class="hljs-keyword">const</span> arr = &#123;<br>            name: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>            age: <span class="hljs-number">18</span>,<br>            sex: <span class="hljs-string">&#x27;男&#x27;</span><br>        &#125;<br><br>        <span class="hljs-keyword">let</span> str = <span class="hljs-string">`</span><br><span class="hljs-string">        &lt;tr&gt;</span><br><span class="hljs-string">            &lt;td&gt;<span class="hljs-subst">$&#123;arr.name&#125;</span>&lt;/td&gt;</span><br><span class="hljs-string">            &lt;td&gt;<span class="hljs-subst">$&#123;arr.age&#125;</span>&lt;/td&gt;</span><br><span class="hljs-string">            &lt;td&gt;<span class="hljs-subst">$&#123;arr.sex&#125;</span>&lt;/td&gt;</span><br><span class="hljs-string">        &lt;/tr&gt;</span><br><span class="hljs-string">`</span><br>        <span class="hljs-keyword">const</span> table = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;table&#x27;</span>);<br>        table.innerHTML = str<br><br><br><br><br>        <span class="hljs-comment">// 3. 在模板字符串中可以放任意的表达式 (如三元表达式, 函数调用, 逻辑运算符, +-*/...)</span><br></code></pre></td></tr></table></figure><h1 id="七、数组方法"><a href="#七、数组方法" class="headerlink" title="七、数组方法"></a>七、数组方法</h1><h2 id="Array-from-obj-把其他类型转成数组类型"><a href="#Array-from-obj-把其他类型转成数组类型" class="headerlink" title="Array.from(obj)把其他类型转成数组类型"></a>Array.from(obj)把其他类型转成数组类型</h2><p> <strong>Array.from(param[, fn]) 把其他类型的数据转化为数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>          <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;a&#x27;</span>,<br>          <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;b&#x27;</span>,<br>          length: <span class="hljs-number">3</span><br>      &#125;<br>      <span class="hljs-keyword">const</span> res = <span class="hljs-built_in">Array</span>.from(obj);<br>      <span class="hljs-built_in">console</span>.log(res);<br></code></pre></td></tr></table></figure><p> <strong>(了解)第二个可选参数 fn 用于对转化后的数组进行遍历修改</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> res1 = <span class="hljs-built_in">Array</span>.from(obj, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;<br>          <span class="hljs-keyword">return</span> item + <span class="hljs-string">&#x27;1&#x27;</span><br>      &#125;);<br></code></pre></td></tr></table></figure><h2 id="获取数组中符合条件的第一个元素"><a href="#获取数组中符合条件的第一个元素" class="headerlink" title="获取数组中符合条件的第一个元素"></a>获取数组中符合条件的第一个元素</h2><p><strong>arr.find (item =&gt; item %2 == 0)</strong></p><p><strong>返回值</strong>: 找到就返回这个元素, 没有找到则返回 undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// find 方法用于查找数组中符合条件的第一个元素，</span><br>    <br>      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">44</span>]<br><br>      <span class="hljs-comment">// 找出大于 10 的第一个元素</span><br><br>      <span class="hljs-built_in">console</span>.log(arr.indexOf(<span class="hljs-number">12</span>));<br><br>      <span class="hljs-keyword">const</span> res = arr.find(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;<br>          <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">10</span><br>      &#125;)<br>      <span class="hljs-built_in">console</span>.log(res);<br></code></pre></td></tr></table></figure><h2 id="获取数组中符合条件的第一个元素的索引"><a href="#获取数组中符合条件的第一个元素的索引" class="headerlink" title="获取数组中符合条件的第一个元素的索引"></a>获取数组中符合条件的第一个元素的索引</h2><p><strong>arr.findIndex()</strong></p><p><strong>返回值: 找到就返回当前元素的所以, 没有找到始终返回 -1</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">130</span>, <span class="hljs-number">44</span>]<br><br>      <span class="hljs-comment">// 找元素中大于 10 的元素索引</span><br>      <span class="hljs-keyword">const</span> res = arr.findIndex(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &gt; <span class="hljs-number">10</span>);<br>      <span class="hljs-built_in">console</span>.log(res);<br></code></pre></td></tr></table></figure><h2 id="查找数组中是否包含某个元素"><a href="#查找数组中是否包含某个元素" class="headerlink" title="查找数组中是否包含某个元素"></a>查找数组中是否包含某个元素</h2><p><strong>arr.includes(固定值)</strong></p><p><strong>返回值: 如果包含则返回 true，否则返回 false</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>]<br><br>      <span class="hljs-keyword">const</span> res = arr2.includes(<span class="hljs-number">10</span>);<br>      <span class="hljs-built_in">console</span>.log(res);<br><br></code></pre></td></tr></table></figure><h2 id="基于原数组去创建一个新数组"><a href="#基于原数组去创建一个新数组" class="headerlink" title="基于原数组去创建一个新数组"></a>基于原数组去创建一个新数组</h2><p><strong>map()</strong></p><p><strong>返回值: 新数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> res1 = arr2.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item / <span class="hljs-number">2</span>);<br>     <span class="hljs-built_in">console</span>.log(res1);<br></code></pre></td></tr></table></figure><h1 id="八、startWidth和endWidth方法"><a href="#八、startWidth和endWidth方法" class="headerlink" title="八、startWidth和endWidth方法"></a>八、startWidth和endWidth方法</h1><p> <strong>1. startsWith() 方法：判断字符串是否以某些字符开头，返回 Boolean</strong></p><p><strong>类似于/^abc/</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;hello wrold&#x27;</span><br>      <span class="hljs-built_in">console</span>.log(str.startsWith(<span class="hljs-string">&#x27;hello&#x27;</span>));<br>      <span class="hljs-keyword">const</span> str1 = <span class="hljs-regexp">/^hello wrold/</span><br>      <span class="hljs-built_in">console</span>.log(str1.test(str));<br></code></pre></td></tr></table></figure><p>​    <strong>2. endsWith() 方法：判断字符串是否以某些字符结尾，返回 Boolean</strong></p><p><strong>类似于/abc$/</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(str.endsWith(<span class="hljs-string">&#x27;wrold&#x27;</span>));<br>      <span class="hljs-keyword">const</span> str2 = <span class="hljs-regexp">/hello wrold$/</span><br>      <span class="hljs-built_in">console</span>.log(str2.test(str));<br></code></pre></td></tr></table></figure><h1 id="九、repeat方法"><a href="#九、repeat方法" class="headerlink" title="九、repeat方法"></a><strong>九、repeat方法</strong></h1><p> <strong>repeat(n)</strong></p><p><strong>用于将某个字符串重复 n 次, 返回重复后的新字符串</strong></p><p><strong>返回值：新的字符串</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;123&#x27;</span><br><br>      <span class="hljs-keyword">let</span> res = str.repeat(<span class="hljs-number">10</span>);<br>      <span class="hljs-built_in">console</span>.log(res);<br></code></pre></td></tr></table></figure><h1 id="十、Set方法"><a href="#十、Set方法" class="headerlink" title="十、Set方法"></a>十、Set方法</h1><p> <strong>es6 中提供了新的数据结构 Set, 它类似于数组，但所有的元素都是唯一的，没有重复值</strong></p><h2 id="创建方式："><a href="#创建方式：" class="headerlink" title="创建方式："></a>创建方式：</h2><p><strong>new Set(数组)</strong></p><p>操作方法(了解)：添加元素 add()    删除元素 delete()    是否含有某个元素 has()    清空所有的元素 clear()</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h2><p>1、所有的元素都是唯一不重复的</p><p>2、数组去重：</p><p>​      <strong>[…new Set(arr)]</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">利用 set 数据类型的不重复性进行数组去重<br>      <span class="hljs-keyword">const</span> newSet1 = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>];<br>      <span class="hljs-keyword">const</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(newSet1)<br>      <span class="hljs-built_in">console</span>.log([...arr]);<br></code></pre></td></tr></table></figure><h2 id="遍历："><a href="#遍历：" class="headerlink" title="遍历："></a>遍历：</h2><p>1、forEach</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">push</span>(<span class="hljs-params">array, ...items</span>) </span>&#123;<br><br>            items.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br><br>                array.push(item);<br><br>            &#125;);<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max.apply(<span class="hljs-literal">null</span>, items)<br><br>        &#125;<br><br>        <span class="hljs-keyword">let</span> arr = [];<br><br>        <span class="hljs-keyword">let</span> res = push(arr, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><br>        <span class="hljs-built_in">console</span>.log(res);<br></code></pre></td></tr></table></figure><p><strong>2、for…of</strong>               <strong>重点</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> mySet) &#123;<br>            <span class="hljs-built_in">console</span>.log(item);<br>        &#125;<br>        <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>]<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> arr) &#123;<br>            <span class="hljs-built_in">console</span>.log(item);<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> str) &#123;<br>            <span class="hljs-built_in">console</span>.log(item);<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> obj = &#123;<br>            name: <span class="hljs-number">1</span>,<br>            age: <span class="hljs-number">2</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> <span class="hljs-built_in">Object</span>.keys(obj)) &#123;<br>            <span class="hljs-built_in">console</span>.log(item);<br>            <span class="hljs-built_in">console</span>.log(obj[item]);<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="向-set-结构中添加数据"><a href="#向-set-结构中添加数据" class="headerlink" title="向 set 结构中添加数据"></a><strong>向 set 结构中添加数据</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>()<br>       set.add(<span class="hljs-number">1</span>);<br>       set.add(<span class="hljs-number">2</span>);<br>       <span class="hljs-built_in">console</span>.log(set);<br></code></pre></td></tr></table></figure><h2 id="把-set-类型的数据转成数组"><a href="#把-set-类型的数据转成数组" class="headerlink" title="把 set 类型的数据转成数组"></a><strong>把 set 类型的数据转成数组</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> newSet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>]);<br>      <span class="hljs-built_in">console</span>.log(newSet);<br>      <span class="hljs-built_in">console</span>.log([...newSet]);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/28/hello-world/"/>
    <url>/2021/01/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>about</title>
    <link href="/2020/02/23/about/index/"/>
    <url>/2020/02/23/about/index/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
